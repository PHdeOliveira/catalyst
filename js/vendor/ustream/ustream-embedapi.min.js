/**!
 * Ustream Embed API
 * http://ustream.tv/
 *
 * Enables sites using Ustream embed iframe to build and adapt on the embed player.
 * The Ustream Embed API provides basic methods to control the live stream
 * or video playback, and enables the user to access essential events
 * of the live stream or played video.
 *
 * USAGE
 *
 * Create an instance of the Embed API by providing the ID of the iframe,
 * or the iframe DOM object itself:
 *
 * var viewer = UstreamEmbed('UstreamIframe');
 *
 * The Ustream Embed API provides the following:
 *
 *     callMethod
 *     getProperty
 *     addListener
 *     removeListener
 *
 * Available methods through 'callMethod':
 *
 *     play
 *         Starts playing the currently loaded channel or video
 *
 *         Example:
 *             viewer.callMethod('play');
 *
 *     pause
 *         Pauses the live stream, or the playback of a video
 *
 *         Example:
 *             viewer.callMethod('pause');
 *
 *     stop
 *         Pauses the live stream, or stops the video and jumps back to the start
 *
 *         Example:
 *             viewer.callMethod('stop');
 *
 *     load
 *         Loads a channel or a video in the player
 *         Requires two additional arguments:
 *             type - the loaded content type (channel|video)
 *             id   - the loaded content id
 *
 *         Example:
 *             viewer.callMethod('load', 'video', 5903947);
 *             viewer.callMethod('load', 'channel', 1524);
 *
 *     seek
 *         Jumps to given position in played recorded video
 *         Requires one argument:
 *             position in seconds
 *
 *         Example:
 *             viewer.callMethod('seek', 180);
 *
 *     volume
 *         Sets the playback sound volume
 *         Requires one argument:
 *             volume percent between 0-100
 *
 *         Example:
 *             viewer.callMethod('volume', 0); // mute
 *
 *
 * Accessable properties by 'getProperty':
 *
 *     duration
 *         Get the video duration in seconds
 *
 *         Example:
 *             viewer.getProperty('duration', callBack);
 *
 *     viewers
 *         Get the current viewer count for the loaded live stream
 *
 *         Example:
 *             viewer.getProperty('viewers', callBack);
 *
 *     progress
 *         Get the current progress for recorded video playback
 *
 *         Example:
 *             viewer.getProperty('progress', callBack);
 *
 *
 * Available events for 'addListener' and 'removeListener':
 *
 *     live
 *         Called when the currently loaded channel becomes live
 *
 *         Example:
 *             viewer.addListener('live', callBack);
 *
 *     offline
 *         Called when the currently loaded channel goes offline
 *
 *         Example:
 *             viewer.addListener('offline', callBack);
 *
 *     finished
 *         Called when the currently loaded and played video reaches its end
 *
 *         Example:
 *             viewer.addListener('finished', callBack);
 *
 *     playing
 *         Called when the currently loaded content playback is started or stopped
 *         Received arguments: playing (boolean)
 *
 *         Example:
 *             viewer.addListener('playing', callBack);
 *
 *     size
 *         Called when the stream size is available,
 *         or changed (changes reported only in flash mode)
 *         Data is the size of the ideal embed iframe according to it's width,
 *         and the stream aspect ratio. Player bar height is included
 *         Received arguments: size (array) width, height
 *
 *         Example:
 *             viewer.addListener('size', callBack);
 *
 */var UstreamEmbed=function(){function a(b){return new a.fn.initialize(b)}function n(a){return typeof a=="string"&&(a=document.getElementById(a)),a}function o(a,b){for(var c in k[a])k[a][c].call(window,a,b)}function p(a,b){if(!j[a])return;for(var c in j[a])j[a][c].call(window,b);j[a]=null,delete j[a]}function q(a){var b,c;!d&&!g&&l.push({origin:a.origin,data:a.data});if(a.origin==d){b=JSON.parse(a.data);if(b.sstream){r(a);return}!!b.event&&b.event.ready&&(s(),o("ready"));if(!!b.event&&b.event.live===!0){o("live");return}if(!!b.event&&b.event.live===!1){o("offline");return}if(!!b.event&&!b.event.ready)if(e)Object.keys(b.event).forEach(function(a){o(a,b.event[a])});else for(var h in b.event)o(h,b.event[h]);if(!!b.property)if(e)Object.keys(b.property).forEach(function(a){p(a,b.property[a])});else for(var h in b.property)p(h,b.property[h])}else if(f&&a.origin==g){r(a);return}}function r(a){var b=JSON.parse(a.data);if(!b.cmd||b.cmd!="ready")args=[b.cmd],args=args.concat(b.args),t.apply(this,args);else{v(h,g,{cmd:"ready"});return}}function s(){b=!0,u()}function t(a){if(a==="socialstream"){h=n(arguments[1]),g=w(h.getAttribute("src")),f=!0;if(l.length)for(var e=0,k=l.length;e<k;e++)q(l[e]);return}if(!b){i||(i=[]),i.push(arguments);return}var m=x(arguments).slice(1);m[0]&&typeof m[0]=="function"&&(j[a]||(j[a]=[]),j[a].push(m[0])),v(c,d,{cmd:a,args:m})}function u(){if(i){while(i.length)t.apply(this,i.shift());i=null}}function v(a,b,c){a.contentWindow.postMessage(JSON.stringify(c),b)}function w(a){return a.match(m)[1].toString()}function x(a){return Array.prototype.slice.call(a,0)}var b=!1,c,d,e=typeof Object.keys!="undefined",f=!1,g,h,i=[],j={},k={},l=[],m=new RegExp("^(http(?:s)?://[^/]+)","im");return a.fn=a.prototype={initialize:function(a){return c=n(a),d=w(c.getAttribute("src")),this},callMethod:function(){t.apply(this,arguments)},getProperty:function(){this.callMethod.apply(this,arguments)},addListener:function(a,b){k[a]||(k[a]=[]),k[a].push(b)},removeListener:function(a,b){}},a.fn.initialize.prototype=a.fn,window.addEventListener?window.addEventListener("message",q,!1):window.attachEvent("onmessage",q),window.UstreamEmbed=a}();