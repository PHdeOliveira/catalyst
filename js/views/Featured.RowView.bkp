// Filename: views/PostView.js

var App = App || {};

// Post Entry View
// ---------------

define([
  'jquery',
  'underscore',
  'backbone',
  'models/Entry',
  'collections/Entries',
  'views/Featured.BlockView',
  'text!templates/featured-row.html',
  'jquery.hammer'
], function($, _, Backbone, Entry, Entries, FeaturedBlockView, featuredRowTpl){


  App.Views.Featured.RowView = Backbone.View.extend({
    tagName: 'div',
    id: 'featuredRow',
    template: _.template( featuredRowTpl ),
    
    initialize: function() {

      this.$featuredRow = this.$el.find('.slide_item');
    
    },

    
    events: {
      "click .slider_nav_right" : "slideRight",
      "click .slider_nav_left" : "slideLeft"
    },


    slideRight: function(e) { 
      this.trigger('next');
      return false;
    },
    
    slideLeft: function(e) { 
      this.trigger('prev');
      return false;
    },
    
    render: function() {
      this.$el.html( this.template(this.options.filterOptions) );
      
      var limitedEntries = this.options.filterCollection.slice(0, 10)

      _.each(limitedEntries, function(entry) {
        var view = new EntryBlockView({ model: entry });
        this.$el.find('.slide_item').append( view.render().el );
        
      }, this);
      
      return this;

    },

    renderEntryBlock: function( entry ) {

    },

    
    show: function(slug) {

      this.$el.append( this.render(post).el );
      
    },
    
    resizeEntries: function( options ) {
    
      var resized = false;
      var $slideArray = this.$el.find('.slide');
      var $firstElement = this.$el.find('.slide:first');
      var itemSize = $firstElement.width()+10;
      var itemLimit = '';
      var results = [];
      
      if(App.Options.screenType != 'phone' && App.Options.screenType != 'desktop-small'){
        itemLimit = Math.floor((App.Options.screenSize - 100) / itemSize);
      } else {
        itemLimit = Math.floor(App.Options.screenSize / itemSize);
      }
  
      var setSize = itemSize * itemLimit;
      var slideOffset = (App.Options.screenSize - setSize) / 2;
  
      this.$el.find('.slide').unwrap();
        
      $.map($slideArray, function(i, n){
        if(n%itemLimit === 0){
          results.push(n);
        }
      });
        
      $.each(results, function(i, v){
        $slideArray.slice(v, v + itemLimit).wrapAll('<div class="slide_item" />');
      });
  
      if(App.Options.screenType != 'phone' && App.Options.screenType != 'desktop-small'){
        $('.slide_window', this.$el).width(setSize + 'px');
        $('.slide_item', this.$el).width(setSize + 'px');
      } else {
        $('.slide_window', this.$el).attr('style', '');
        $('.slide_item', this.$el).width(App.Options.screenSize + 'px');
      };
      
      var resized = true;
      
      return resized;
          
    },

    /* Hammer.js Swiping for Carousels */
  
    Carousel: function( options, context ){

      var self = this;
      var view = context;
      
      var row = view.$el.find('.entry_slider');
      var container = row.find('.slide_wrapper');
      var panes = row.find('.slide_item');
      var pane_width = 0;
      var pane_width_percent = 0;
      var pane_count = panes.length;
      var current_pane = 0;
                
      /**
       * initial
       */
      self.init = function() {
          setPaneDimensions();
  
          // $(window).on('load resize orientationchange', function() {
          //     setPaneDimensions();
          //     // updateOffset();
          // })
      };
      

      /**
       * show pane by index
       * @param   {Number}    index
       */
      self.showPane = function( index ) {

          // between the bounds
          index = Math.max(0, Math.min(index, pane_count-1));
          //onsole.log(pane_count);
          //console.log(index);
          current_pane = index;
  
          var offset = -((100/pane_count)*current_pane);
          setContainerOffset(offset, true);

      };
      

      self.next = function() { 
        return self.showPane(current_pane + 1, true);
      };

      self.prev = function() { 
        return self.showPane(current_pane - 1, true);
      };   
      
      /**
       * set the pane dimensions and scale the container
       */
  
      function setPaneDimensions() {
          pane_width = container.find('.slide_item:first').width();
          pane_width_percent = Math.floor((App.Options.screenSize / pane_width) * 100);
          panes.each(function() {
              // $(this).width(pane_width);
          });
          container.width(pane_width*pane_count);
          
          console.log(container.width());
          console.log(pane_count);
          console.log(pane_width);
      };
  

  
  
      function setContainerOffset(percent, animate) {
          container.removeClass("animate");
  
          if(animate) {
              container.addClass("animate");
          }
  
          if(Modernizr.csstransforms3d) {
              container.css("transform", "translate3d("+ percent +"%,0,0) scale3d(1,1,1)");
          }
          else if(Modernizr.csstransforms) {
              container.css("transform", "translate("+ percent +"%,0)");
          }
          else {
              var px = ((pane_width*pane_count) / 100) * percent;
              container.css("left", px+"px");
          }
      }
  
  
      function handleHammer(ev) {
          // disable browser scrolling
          // ev.gesture.preventDefault();
  
          //console.log(ev);

          var ev = ev;
  
          switch(ev.type) {
              case 'dragright':
              case 'dragleft':
                  // stick to the finger
                  var pane_offset = -(100/pane_count)*current_pane;
                  var drag_offset = ((100/pane_width)*ev.gesture.deltaX) / pane_count;
  
                  // slow down at the first and last pane
                  if((current_pane == 0 && ev.gesture.direction == Hammer.DIRECTION_RIGHT) ||
                       (current_pane == pane_count-1 && ev.gesture.direction == Hammer.DIRECTION_LEFT)) {
                    drag_offset *= .4;
  
                  }
                  
                  setContainerOffset(drag_offset + pane_offset);
                  break;
  
              case 'swipeleft':
                  view.slideRight();
                  ev.gesture.stopDetect();
                  break;
  
              case 'swiperight':
                  view.slideLeft();
                  ev.gesture.stopDetect();
                  break;
  
              case 'release':
                  // more then 50% moved, navigate
                  if(Math.abs(ev.gesture.deltaX) > pane_width/2) {
                      if(ev.gesture.direction == 'right') {
                          self.prev();
                      } else {
                          self.next();
                      }
                  }
                  else {
                      self.showPane(current_pane, true);
                  }
                  break;
          }
      }
  
      row.hammer({ 
        drag_lock_to_axis: true
      }).on("release dragleft dragright swipeleft swiperight", handleHammer);
    }
  
  });

  return App.Views.Featured.RowView;

});